1. CrearunaaplicaciónllamadatiendaconPostgreSQL.

cd desktop
rails new tienda -d postgresql

Realizar un commit con el proyecto vacío.

cd tienda
git init
git add --all
git commit -m "primer commit"

Crear y moverse al branch development.

git checkout -b development

2. Crearelmodelodecategorías(category)conelcampo nombre (name) y el modelo de productos.

rails g model category nombre
rails g model product nombre
rails g migration addCategoryToProduct category:references

Revisar la migración antes de correr rake db:migrate.

subl.
rake db:create
rake db:migrate

Añadir los archivos después de la migración a GIT.

git add --all
git commit -m "segundo commit"

Hacer push a Github de la rama development.

git remote add origin git@github.com:JVergaraCA/taller-tienda.git
git push -u origin master

Revisar la migración antes de correr rake db:migrate.

subl . 
rake db:migrate

3. Sedebeutilizarrailroadyparadibujarlasrelaciones. Después de agregar las relaciones belongs_to y has_many generar el diagrama de nuevo y observar la diferencia
        
subl . 
tienda -> Gemfile -> buscar group : development, test do
agregar gem 'railroady'
hacer bundle en el terminal
rake diagram:all

ir a subl
app->models->category.rb
class Category < ApplicationRecord
	has_many :products
end
app->models->product.rb
class Product < ApplicationRecord
	belongs_to :category
end

ir a terminal hacer rake diagram:all

 4. Elmodelodeproductosolodebeaceptarproductos con precios.
(estamos agregando una columna)
 rails g migration addPriceToProduct price:integer
 rake db:migrate
 subl . 
 tienda->models->product
 class Product < ApplicationRecord
	belongs_to :category
	validates :price, presence: true
end

ir a consola

rails c

crear una categoria

c=Category.new
c.nombre='Ropa'
c.save

crear producto dentro de categoria

p=Product.new
p.nombre='Americanino'
p.price=50
p.category_id=1
p.save

5. Validarqueelproductotengacategoría
En Rails 4 hay que crear una validación.
En Rails 5 la validación viene incorporada en el belongs_to.

esta listo, ya que lo validamos con la category_id

6. Agregarelcampopremiumalosproductos.
El campo premium por defecto debe ser false (puede ser un callback o ser especificado en la migración)
Añadir los archivos después de la migración a GIT.
Hacer push a Github de la rama development.

rails g migration addPremiumToProduc premium:boolean
rake db:migrate
app->model->product.rb
agregar esto=
before_save :premium_default
	def premium_default
		unless self.premium.present? or self.premium==true
			self.premium = false
		end
		
	end
probar en rails consola
git add --all
git commit - m 'tercer commit'
git push -u origin master



7. Dentrodelarchivoseeds.rb
Borrado de todas las categorías y productos (si el borrado en cascada funciona no importa el orden)
Agregar 3 categorías.
Agregar al menos dos productos a cada categoría del seed.
Uno de los productos debe ser agregado ocupando el método build de la relación products de una categoría.
Uno de los productos debe ser agregado ocupando el método create.
Después de agregar el último producto, destruirlo.
Tomar el último producto, actualizarlo a premium.
Actualizar todas las categorías cambiando sus respectivos nombres a mayúscula (No confundir con el callback visto en clases).
Añadir a GIT los archivos respectivos.
Hacer push a Github de la rama development. Hacer el merge a master
Hacer push a la rama master

dentro de archivoseeds

Product.destroy_all
Category.destroy_all
3.times do|t|
	c=Category.create(nombre:"#{t}")
	c.products.build(nombre:"#{t}", price: 2000)
	Product.create(nombre:"#{t}", price: 3000, category_id: c.id)
end

rake db:seed

Product.last.destroy

rake db:seed
rails c
Product.all(se elimino el ultimo)

p=Product.last
p.premium = "TRUE"
p.save

rake db:seed
rails c
Product.all(el ultimo sera true)

Category.all.each do |x|
	x.nombre = x.nombre.upcase
	x.save
end

rake db:seed
rails c
Category.all
(las pone en mayuscula los nombres)

consola

git add --all
git commit -m "Tercer Commit"
git push origin master
git checkout master
git merge development
git push origin master




Parte Backend avanzadas
1. Crearycheckoutalaramabackendavanzado

git checkout -b backendavanzado

2. Agregaralmodelodeproductoselscopepremium para seleccionar todos los productos premium.

agregar esto a tienda->app->product
scope :premium, ->{where(premium: true)}


3. Sedebeagregarelscopelast_nquerecibecomo parámetro el número de productos a devolver.
No utilizar el método de clase .last puesto que devuelve un array y luego los métodos no serían concatenables
Añadir a GIT los archivos respectivos.
Hacer push a Github de la rama development.

agregar esto a tienda->app->product
(debajo del primer scop)
scope :last_n, ->(x){limit(x)}
git add --all
git commit -m "scoup"
git checkout development
git merge backendavanzado
git push origin master
git checkout backendavanzado


4. Agregarborradoencascadalosproductosalborrar una categoría.


app>models>category
dependent: :delete_all



5. Alborrarelúltimoproductodeunacategoríasedebe borrar la categoría (hint: ocupar el callback after_destroy).


6. Crearuncampodeltipointegerparacategoría llamado descuento que debe ir de 0 a 100.
7. Crearunmétododeinstanciallamadoprecio_finalen los productos que muestre el precio con el descuento aplicado.
Añadir a GIT los archivos Hacer el commit
         
Hacer el merge a master
hacer el push de la rama master
Parte Front-end
1. Crearycheckoutalaramafrontend
2. Construirelcontrollerdeproductosconelmétodo index.
3. Enlavistaindexmostrartodoslosproductos.
4. Cadaproductodebeaparecerjuntoconsucategoría.
5. Crearunformularioparafiltrarlosproductosporsu nombre.
6. Crearuninputdistintoparafiltrarlosporelprecio.
7. Lapáginainicialdebeserladetodoslosproductos.
8. Agregarallayoutbootstrap.
9. Ponerelyielddentrodeuncontainerdebootstrap.
10. Agregarelnavbaryponerdentrodeesteloslinksa categorías y a productos.
Añadir a GIT los archivos
Hacer el commit
Hacer el merge a master
hacer el push de la rama master
Deployment
Poner las gemas necesarias para Heroku. Crear y push a Heroku
Migrar la base de datos de Heroku Correr el seed en Heroku
Probar que todo funcione correctamente